/** THIS FILE WAS GENERATED BY @publicodes/tools (v1.8.0). PLEASE, DO NOT EDIT IT MANUALLY. */

import { Rule } from 'publicodes'

/**
 * String representing a date in the format 'DD/MM/YYYY' or 'MM/YYYY'.
 */
export type PDate = string

/**
 * Publicodes boolean type.
 */
export type PBoolean = 'oui' | 'non'

/**
 * String constant are enclosed in single quotes to differentiate them from
 * references.
 */
export type PString = `'${string}'`

/**
 * Corresponding Publicodes situation with types inferred for each rule.
 *
 * @note
 * This represents the situation as needed by the 'setSituation' method of the
 * {@link Engine} class with raw values (i.e. string constants are enclosed in
 * "''" and boolean values are 'oui' or 'non').
 */
export type Situation = Partial<{
  "chiffre d'affaires": number,
  "chiffre d'affaires . TJM": number,
  "chiffre d'affaires . nombre de jour": number,
  "auto-entrepreneur": PBoolean,
  "cotisations": number,
  "cotisations . taux": number,
  "charges": number | null,
  "revenu net": number,
  "exemples": PBoolean,
  "exemples . CA élevé": number
}>

/**
 * Associates for each rule name its corresponding value type (in JavaScript
* form) that will be returned by the {@link Engine.evaluate} method.
 */
export type RuleValue = Partial<{
  "chiffre d'affaires": number,
  "chiffre d'affaires . TJM": number,
  "chiffre d'affaires . nombre de jour": number,
  "auto-entrepreneur": boolean,
  "cotisations": number,
  "cotisations . taux": number,
  "charges": number | null,
  "revenu net": number,
  "exemples": boolean,
  "exemples . CA élevé": number
}>

/**
 * Subset of the {@link Situation} with only the rules that are questions
 * (i.e. input rules).
 *
 * @note
 * This represents the input rules expected to be provided by the user.
 * Therefore the values are in their JavaScript form (i.e. string constants are
 * enclosed in '' and boolean values are 'true' or 'false').
 */
export type Questions = Partial<{

}>

/**
 * All rule names available in the model.
 */
export type RuleName = keyof Situation

declare let rules: Record<RuleName, Rule>

export default rules
